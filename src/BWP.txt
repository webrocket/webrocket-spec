BWP - Backend Workers Protocol
==============================
:author: Krzysztof Kowalik
:email: chris@nu7hat.ch
:revdate: December 2011
:revnumber: 0.1
:thisver:
:latestpub:
:latestdraft: http://rfc.webrocket.io/draft/BWP.html
:status: Draft
:webrocket: <<WR,WebRocket>>

* *Latest Editor's Draft*: {latestdraft}
* *Status*: {status}

[abstract]
Abstract
--------
The *Backend Workers Protocol* (*BWP*) is a transport layer protocol
for exchanging messages between Server-side Web Applications or Workers
and the Tasks Queue implemented by the {webrocket}.

Language
--------
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <<RFC2119, RFC 2119>>.

Goals
-----
The purpose of the protocol is to allow for bidirectional, evented
communication between Server-side Web Applications and {webrocket}
Tasks Queue over the <<TCP,TCP protocol>> using <<ZEROMQ,ZeroMQ>>
components.  

Generalized architecture
------------------------
The Backend Workers Protocol is a <<PROTOBUF,Protocol Buffers>> based
protocol designed for rapid exchanging tasks with the Server-side Web
Applications or Workers.

Components
~~~~~~~~~~
Communication happens over the <<TCP,TCP protocol>> using
<<ZEROMQ,ZeroMQ>> components. {webrocket}'s Tasks Queue serves data
bidirectionaly using the <<ZMQSOCKET,'ROUTER' socket>>. The Client
MUST operate using 2 sockets. Incoming tasks MUST be handled using
the bidirectional <<ZMQSOCKET,'DEALER' socket>>. All other operations
MUST be performed by the blocking <<ZMQSOCKET,'REQ' socket>>.

Endpoint
~~~~~~~~
To simplify configuration for the end users, client libraries MAY use
a particular URI to connect to the server:	 

	[scheme]://[host]:[port]/[vhost]?token=[token]

[horizontal]
'scheme'::
	Will be 'wr' for a normal connection and 'wrs' for a secure.

'host'::
	There is bound the server.

'port'::
	The port to connect to.

'vhost'::
	The virtual host to connect to.
	
'token'::
	The Vhost access token.

.Example

	wr://webrocket.io/echo?token=a1b2cc3...d4e5ff6

.Usage

The mask above should be translated into combination of the ZeroMQ
'URL' and 'identity'. The following URL should be used for particular
configuration:

	tcp://[host]:[port]

NOTE: The URL's 'scheme' in endpoint example SHALL be used only to
	inform user about the protocol used to connect. It's not used
	further by connections while those depends only on 'host' and
	'port'.

Rest of the scheme parameters should be used to compose identity
of the client to handle <<client-auth, authentication>>.

[[client-auth]]
Authentication
~~~~~~~~~~~~~~
Not authenticated Clients MUST NOT be able to perform any operation
on the Server. All Clients MUST be authenticated by their identity,
which SHALL be composed from few elements and MUST have the following
format:

	[type]:[vhost]:[access-key]:[client-id]

[horizontal]
'type'::
	Type of the socket, MUST be 'dlr' or 'req'.

'vhost'::
	VHost to connect to.

'access-key'::
	The VHost access key.

'client-id'::
	Unique id of the client. It should be generated by the client
	using the UUID algorithm.

Protocol
~~~~~~~~
The *Backend Worker Protocol* implemented by {webrocket} MUST be based
on <<PROTOBUF, Protocol Buffers>>. 

.Buffer specification

-----
message BackendMessage {
	enum Command {
		OK        = 1; // Server -> REQ
		ERROR     = 2; // Server -> REQ
		HEARTBEAT = 3; // DEALER -> Server & Server -> DEALER
		BROADCAST = 4; // REQ -> Server & Server -> DEALER
		SAT       = 5; // REQ -> Server & Server -> REQ
		OPENCHAN  = 6; // REQ -> Server
		CLOSECHAN = 7; // REQ -> Server
		QUIT      = 8; // DEALER -> Server, Server -> DEALER
	}
	
	required Command cmd = 1;

	optional string channel = 2;
	optional string trigger = 3;
	optional string data = 5;
}
-----
	
[[commands]]
Commands
~~~~~~~~
The protocol implemented by {webrocket} defines three kinds of commanfs: 
<<dealer-commands, 'DEALER socket specific'>>, <<req-commands, 'REQ socket
specific'>> and <<server-commands, 'server specific'>>.

[[client-commands]]
REQ Commands (REQ -> Server)
--------------------------
The 'REQ' socket SHALL be used only to request/exchange informations
from the Server.

.Sequence

* Client requests particular imformation via a 'REQ' socket
* If request is valid and no errors occured then Server returns
  requested information.
* If error occuret then Server answers with the 'ERROR' message.

This is full list of the commands which MUST be supported by the
Server and Clients.

[[client-sat]]
Getting a Single Access Token
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Request for a *Single Access Token* - token allowing the Frontend
Client to authenticate with particular rights. Server SHALL respond
with its verision of the <<server-sat,'SAT'>> event.

.Message

	cmd  = SAT
	data = "permission-regexp"

[horizontal]
'permission'::
	A permission regular expression, matching allowed channels.

[[client-openchan]]
Opening a new channel
~~~~~~~~~~~~~~~~~~~~~
Requests to open a specified channel. The Server MAY respond with a
<<server-ok, simple confirmation>> response or with an <<server-error,
error message>>.

.Message

	cmd     = OPENCHAN
	channel = "channel-name"

[horizontal]
'channel'::
	A name of the channel to open.

[[client-closechan]]
Closing a channel
~~~~~~~~~~~~~~~~~
Requests to close a specified channel. The Server MAY respond with a
<<server-ok, simple confirmation>> response or with an <<server-error,
error message>>.

.Message

	cmd     = CLOSECHAN
	channel = "channel-name"

[horizontal]
'channel'::
	A name of the channel to close.

[[client-trigger]]
Broadcastind data
~~~~~~~~~~~~~~~~~
Requests to broadcast given data on the channel specified channel. The
Server MAY respond with a <<server-ok, simple confirmation>> response
or with an <<server-error, error message>>.

.Message

	cmd     = BROADCAST
	channel = "channel-name"
	event   = "event-name"
	data    = "payload"

[horizontal]
'channel'::
	A name of the channel to broadcast to.
'event'::
	A name of the event to trigger.
'data'::
	JSON-encoded payload broadcasted on the channel.
	
References
----------
[bibliography]
.Bibliography
- [[[RFC2119]]] link:http://tools.ietf.org/html/rfc2119[Key words
  for use in RFCs to Indicate Requirement] - S. Bradner, IETF
- [[[TCP]]] link:http://www.ietf.org/rfc/rfc793.txt[Transmission
  Control Protocol] - J. Postel, IETF
- [[[JSON]]] link:http://www.ietf.org/rfc/rfc4627[JavaScript Object
  Notation (JSON)] - D. Crockford, JSON.org
- [[[WR]]] link:{homepage}[WebRocket's Home Page] - webrocket.io
- [[[ZEROMQ]]] link:http://zeromq.org[ZeroMQ's Home Page] - zeromq.org
- [[[ZMQSOCKET]]] link:http://api.zeromq.org/2-1:zmq-socket[zmq_socket
  Manual Page] - api.zeromq.org
- [[[PROTOBUF]]] link:http://code.google.com/p/protobuf/[Protobuf
  Project Page] - code.google.com
